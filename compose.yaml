services:
    php:
        image: ${IMAGES_PREFIX:-}app-pigz
        restart: unless-stopped
        environment:
            SERVER_NAME: ${SERVER_NAME:-localhost}
            MERCURE_PUBLISHER_JWT_KEY: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
            MERCURE_SUBSCRIBER_JWT_KEY: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
            DATABASE_URL: "mysql://pigz:secret@mysql:3306/pigz"
            MERCURE_URL: ${CADDY_MERCURE_URL:-http://php/.well-known/mercure}
            MERCURE_PUBLIC_URL: ${CADDY_MERCURE_PUBLIC_URL:-https://${SERVER_NAME:-localhost}:${HTTPS_PORT:-443}/.well-known/mercure}
            MERCURE_JWT_SECRET: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
            SYMFONY_VERSION: ${SYMFONY_VERSION:-}
            STABILITY: ${STABILITY:-stable}
        volumes:
            - caddy_data:/data
            - caddy_config:/config
        ports:
            - target: 8080
              published: ${HTTP_PORT:-8080}
              protocol: tcp

        networks:
            - app-network
        depends_on:
            - mysql
        command: >
            sh -c "
              composer install &&
              php bin/console doctrine:database:create --if-not-exists &&
              php bin/console doctrine:migrations:migrate --no-interaction
            "

    mysql:
        image: mysql:8.0
        container_name: mysql
        environment:
            MYSQL_ROOT_PASSWORD: root_secret
            MYSQL_DATABASE: pigz
            MYSQL_USER: pigz
            MYSQL_PASSWORD: secret
        ports:
            - "3306:3306"
        volumes:
            - mysql_data:/var/lib/mysql
        networks:
            - app-network

    ###> doctrine/doctrine-bundle ###
    database:
        image: postgres:${POSTGRES_VERSION:-16}-alpine
        environment:
            POSTGRES_DB: ${POSTGRES_DB:-app}
            # You should definitely change the password in production
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
            POSTGRES_USER: ${POSTGRES_USER:-app}
        healthcheck:
            test:
                [
                    "CMD",
                    "pg_isready",
                    "-d",
                    "${POSTGRES_DB:-app}",
                    "-U",
                    "${POSTGRES_USER:-app}",
                ]
            timeout: 5s
            retries: 5
            start_period: 60s
        volumes:
            - database_data:/var/lib/postgresql/data:rw
            # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
            # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###

volumes:
    caddy_data:
    caddy_config:

    ###> doctrine/doctrine-bundle ###
    database_data:
    ###< doctrine/doctrine-bundle ###
    mysql_data:

networks:
    app-network:
        driver: bridge
